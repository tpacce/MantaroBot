/* Mantaro's build.gradle */

//Imports
import org.apache.tools.ant.filters.ReplaceTokens


//Plugins
plugins {
	//Compiles Java
	id 'java'
	//Adds an Executable Manifest
	id 'application'
	//Creates FatJars
	id 'com.github.johnrengelman.shadow' version '1.2.4'
	//Checks for RestActions
	id 'com.sedmelluq.jdaction' version '1.0.1'
}

//Define the Main Class
mainClassName = "net.kodehawa.mantarobot.MantaroBot"

//Use an unified versioning system
def ver = new Version(major: 4, minor: 4, revision: 2)
version ver.toString()

//We are going to use Java 8
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
	maven { url 'https://jitpack.io' }
	mavenLocal()
}

dependencies {
	compile 'net.dv8tion:JDA:3.1.1_210'

	compile 'com.sedmelluq:lavaplayer:1.2.39'
	compile 'com.sedmelluq:jda-nas:1.0.5'

	compile 'org.reflections:reflections:0.9.10'
	compile 'ch.qos.logback:logback-classic:0.9.26'

	compile 'org.apache-extras.beanshell:bsh:2.0b6'

	compile 'us.monoid.web:resty:0.3.2'
	compile 'org.jsoup:jsoup:1.8.3'

	compile 'br.com.brjdevs:utils:1.0.0_15'
	compile 'br.com.brjdevs:network:1.0.0_2'
	compile 'br.com.brjdevs:trove-utils:1.0.0_4'

	compile 'com.google.guava:guava:22.0'
	compile 'com.google.code.gson:gson:2.8.0'

	compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.0.pr1'

	compile 'com.rethinkdb:rethinkdb-driver:2.3.3'

	compile 'mysql:mysql-connector-java:6.0.4'

	compile 'net.sf.trove4j:trove4j:3.0.3'

	compile 'com.patreon:patreon:0.1.1'

	compile 'org.springframework.boot:spring-boot-starter-web:1.4.3.RELEASE'

    compile 'net.jodah:expiringmap:0.5.8'
	
    compile 'joda-time:joda-time:2.9.9'

    compile fileTree(dir: 'lib', include: '*.jar')

    compileOnly "org.projectlombok:lombok:1.16.16"
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.2'
}

//Task for the versioning system
task prepareSource(type: Copy) {
	from 'src/main/java'
	into 'build/prepared-src'
	filter(ReplaceTokens, tokens: [
		version: ver.toString()
	])
	dependsOn clean
}
prepareSource.dependsOn clean

compileJava {
	source = prepareSource.destinationDir
	classpath = sourceSets.main.compileClasspath
	options.encoding = 'UTF-8'
	dependsOn prepareSource
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

build.dependsOn shadowJar

artifacts {
	archives shadowJar
}

task cleanDistTar(type: Delete) { delete files(distTar) }
distTar { classifier = "trash" }
distTar.finalizedBy cleanDistTar

task cleanDistZip(type: Delete) { delete files(distZip) }
distZip { classifier = "trash" }
distZip.finalizedBy cleanDistZip

task cleanShittyJar(type: Delete) { delete files(jar) }
jar { classifier = "trash" }
jar.finalizedBy cleanShittyJar

shadowJar { classifier = "" }

class Version {
	String major, minor, revision

	static String getBuild() {
		System.getenv("BUILD_NUMBER") ?: System.getProperty("BUILD_NUMBER") ?: "DEV-" + new Date().format('ddMMyyyy')
	}

	String toString() {
		"${major}.${minor}.${revision}_$build"
	}
}